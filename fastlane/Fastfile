# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.39.0"

default_platform :ios


platform :ios do
  before_all do 
  end

  private_lane :setup do |options|
    puts "Setup: #{options[:options]}\n"
    opts = options[:options]

    # set build and version numbers
    build_number = get_build_number(xcodeproj: "Client.xcodeproj")
    version_number = get_version_number(xcodeproj: "Client.xcodeproj")
    ENV["BUILD_VERSION"] = opts[:build] || build_number
    ENV["APP_VERSION"] = opts[:version] || version_number

    # create a name for this build
    ENV["DATESTAMP"] = Time.now.utc.iso8601.gsub(/\W/, '')
    ENV["BRANCH_NAME"] = "firefox-ios-#{lane_context[SharedValues::LANE_NAME].gsub!(' ','-')}-#{ENV["APP_VERSION"]}(#{ENV["BUILD_VERSION"]})"
    ENV["BUILD_NAME"] = "#{ENV["BRANCH_NAME"]}-#{ENV["DATESTAMP"]}"
    puts ENV["BUILD_NAME"]

    # checkout a new branch for build
    checkout_git_branch(
      base_branch: opts[:branch],
      branch: ENV["BRANCH_NAME"]
    )

    # import locales
    sh("../scripts/localise.sh")

    # make builds & prov profile dirs
    sh("./scripts/mkdirs.sh")

    version_bumped = false

    if ENV["BUILD_VERSION"] != build_number
      increment_build_number(
        build_number: ENV["BUILD_VERSION"],
        xcodeproj: 'Client.xcodeproj',
      )
      version_bumped = true
    end

    if ENV["APP_VERSION"] != version_number
      increment_version_number(
        version_number: ENV["APP_VERSION"],
        xcodeproj: 'Client.xcodeproj',
      ) 
      version_bumped = true
    end

    if version_bumped == true
      commit_version_bump(
        message: 'Version Bump', 
        xcodeproj: 'Client.xcodeproj', 
      ) 
    end
  end

  desc "Builds an Aurora build"
  lane :aurora do |options|
    options = options[:options] || options
    puts "Aurora: #{options}\n"
    setup(options: options)

    ENV["SIGH_TEAM_ID"] = "9G8J6YA743"

    sigh(app_identifier: "org.mozilla.ios.FennecAurora",
      output_path: "./provisioning-profiles/" )
    sigh(app_identifier: "org.mozilla.ios.FennecAurora.SendTo",
      output_path: "./provisioning-profiles/")
    sigh(app_identifier: "org.mozilla.ios.FennecAurora.ShareTo",
      output_path: "./provisioning-profiles/" )
    sigh(app_identifier: "org.mozilla.ios.FennecAurora.ViewLater",
      output_path: "./provisioning-profiles/" )

    gym(scheme: "FennecAurora",
      output_directory: "./builds/",
      output_name: "#{ENV["BUILD_NAME"]}.ipa",
      sdk: "iphoneos",
      clean: true,
      export_method: "enterprise",
      export_team_id: ENV["SIGH_TEAM_ID"],
      include_symbols: true,
      include_bitcode: false)

  end

  desc "Builds an l10n build"
  lane :l10n do |options|
    aurora(options)
  end

  desc "Takes marketing snapshots using current branch"
  lane :marketing do
    snapshot
    frameit(white: true)
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    #commit_version_bump(
    #  message: 'Version Bump',                    # create a commit with a custom message
    #  xcodeproj: 'Client.xcodeproj', # optional, if you have multiple Xcode project files, you must specify your main project here
    #) 
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
# More information about multiple platforms in fastlane: 
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
